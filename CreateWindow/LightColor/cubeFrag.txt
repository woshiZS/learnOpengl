#version 330 core
in vec3 norm;
in vec3 fragPos;
in vec2 TexCoords;

out vec4 FragColor;
uniform vec3 viewPos;

struct Material{
	vec3 ambient;
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
	sampler2D emission;
};

struct Light{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform Material material;
uniform Light light;
uniform float deltaY;
uniform float MatrixLight;

void main(){
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

	vec3 normal = normalize(norm);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.diffuse, TexCoords));

	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, normal);

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = texture(material.specular, TexCoords).rgb * spec * light.specular;

	
	vec3 result = ambient + diffuse + specular;
	float x = TexCoords.x;
	float y = TexCoords.y;
	if(x >= 0.1 && x <= 0.9 && y >= 0.1 && y <= 0.9)
		result = result + MatrixLight * texture(material.emission, vec2(TexCoords.x + deltaY, TexCoords.y + deltaY)).rbg;
	FragColor = vec4(result, 1.0);
}